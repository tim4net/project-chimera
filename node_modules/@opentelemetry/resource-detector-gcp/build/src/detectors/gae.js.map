{"version":3,"file":"gae.js","sourceRoot":"","sources":["../../../src/detectors/gae.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;;AAEH;;;GAGG;AAEH,yCAAyC;AACzC,6BAA6B;AAC7B,+BAA+B;AAE/B,MAAM,eAAe,GAAG,aAAa,CAAC;AACtC,MAAM,eAAe,GAAG,aAAa,CAAC;AACtC,MAAM,gBAAgB,GAAG,cAAc,CAAC;AACxC,MAAM,OAAO,GAAG,SAAS,CAAC;AAC1B,MAAM,YAAY,GAAG,UAAU,CAAC;AAChC,MAAM,kBAAkB,GAAG,MAAM,CAAC;AAE3B,KAAK,UAAU,mBAAmB;IACvC,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,YAAY,CAAC;AAC/C,CAAC;AAFD,kDAEC;AAEM,KAAK,UAAU,WAAW;IAC/B,OAAO,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,KAAK,SAAS,CAAC;AACpD,CAAC;AAFD,kCAEC;AAED;;;GAGG;AACI,KAAK,UAAU,WAAW;IAC/B,OAAO,SAAS,CAAC,eAAe,CAAC,CAAC;AACpC,CAAC;AAFD,kCAEC;AAED;;;GAGG;AACI,KAAK,UAAU,cAAc;IAClC,OAAO,SAAS,CAAC,eAAe,CAAC,CAAC;AACpC,CAAC;AAFD,wCAEC;AAED;;;GAGG;AACI,KAAK,UAAU,eAAe;IACnC,OAAO,SAAS,CAAC,gBAAgB,CAAC,CAAC;AACrC,CAAC;AAFD,0CAEC;AAED;;;GAGG;AACI,KAAK,UAAU,6BAA6B;IAIjD,OAAO,MAAM,GAAG,CAAC,yBAAyB,EAAE,CAAC;AAC/C,CAAC;AALD,sEAKC;AAED;;;GAGG;AACI,KAAK,UAAU,wBAAwB;IAC5C,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAS,kBAAkB,CAAC,CAAC;IACjE,yDAAyD;IACzD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/C,CAAC;AAJD,4DAIC;AAED;;;GAGG;AACI,KAAK,UAAU,mBAAmB;IACvC,OAAO,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;AACtC,CAAC;AAFD,kDAEC;AAED,SAAS,SAAS,CAAC,GAAW;IAC5B,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7B,IAAI,GAAG,KAAK,SAAS,EAAE;QACrB,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,YAAY,CAAC,CAAC;KAC1D;IACD,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["/*\n * Copyright 2023 Google LLC\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Implementation in this file copied from\n * https://github.com/GoogleCloudPlatform/opentelemetry-operations-go/blob/v1.8.0/detectors/gcp/app_engine.go\n */\n\nimport * as metadata from 'gcp-metadata';\nimport * as gce from './gce';\nimport * as faas from './faas';\n\nconst GAE_SERVICE_ENV = 'GAE_SERVICE';\nconst GAE_VERSION_ENV = 'GAE_VERSION';\nconst GAE_INSTANCE_ENV = 'GAE_INSTANCE';\nconst GAE_ENV = 'GAE_ENV';\nconst GAE_STANDARD = 'standard';\nconst ZONE_METADATA_ATTR = 'zone';\n\nexport async function onAppEngineStandard(): Promise<boolean> {\n  return process.env[GAE_ENV] === GAE_STANDARD;\n}\n\nexport async function onAppEngine(): Promise<boolean> {\n  return process.env[GAE_SERVICE_ENV] !== undefined;\n}\n\n/**\n * The service name of the app engine service. Check that {@link onAppEngine()} is true before\n * calling this, or it may throw exceptions.\n */\nexport async function serviceName(): Promise<string> {\n  return lookupEnv(GAE_SERVICE_ENV);\n}\n\n/**\n * The service version of the app engine service. Check that {@link onAppEngine()} is true\n * before calling this, or it may throw exceptions.\n */\nexport async function serviceVersion(): Promise<string> {\n  return lookupEnv(GAE_VERSION_ENV);\n}\n\n/**\n * The service instance of the app engine service. Check that {@link onAppEngine()} is true\n * before calling this, or it may throw exceptions.\n */\nexport async function serviceInstance(): Promise<string> {\n  return lookupEnv(GAE_INSTANCE_ENV);\n}\n\n/**\n * The zone and region in which this program is running. Check that {@link onAppEngine()} is\n * true before calling this, or it may throw exceptions.\n */\nexport async function flexAvailabilityZoneAndRegion(): Promise<{\n  zone: string;\n  region: string;\n}> {\n  return await gce.availabilityZoneAndRegion();\n}\n\n/**\n * The zone the app engine service is running in. Check that {@link onAppEngineStandard()} is\n * true before calling this, or it may throw exceptions.\n */\nexport async function standardAvailabilityZone(): Promise<string> {\n  const zone = await metadata.instance<string>(ZONE_METADATA_ATTR);\n  // zone is of the form \"projects/233510669999/zones/us15\"\n  return zone.slice(zone.lastIndexOf('/') + 1);\n}\n\n/**\n * The region the app engine service is running in. Check that {@link onAppEngineStandard()} is\n * true before calling this, or it may throw exceptions.\n */\nexport async function standardCloudRegion(): Promise<string> {\n  return await faas.faasCloudRegion();\n}\n\nfunction lookupEnv(key: string): string {\n  const val = process.env[key];\n  if (val === undefined) {\n    throw new Error(`Environment variable ${key} not found`);\n  }\n  return val;\n}\n"]}