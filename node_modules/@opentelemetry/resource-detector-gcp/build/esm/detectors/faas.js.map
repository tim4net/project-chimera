{"version":3,"file":"faas.js","sourceRoot":"","sources":["../../../src/detectors/faas.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH;;;GAGG;AAEH,OAAO,KAAK,QAAQ,MAAM,cAAc,CAAC;AAEzC,MAAM,gBAAgB,GAAG,IAAI,CAAC;AAC9B,MAAM,oBAAoB,GAAG,iBAAiB,CAAC;AAC/C,MAAM,yBAAyB,GAAG,iBAAiB,CAAC;AACpD,MAAM,gBAAgB,GAAG,WAAW,CAAC;AACrC,MAAM,iBAAiB,GAAG,YAAY,CAAC;AACvC,MAAM,oBAAoB,GAAG,QAAQ,CAAC;AAEtC,MAAM,CAAC,KAAK,UAAU,UAAU;IAC9B,OAAO,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,KAAK,SAAS,CAAC;AACzD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,OAAO,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,KAAK,SAAS,CAAC;AAC9D,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,QAAQ;IAC5B,OAAO,SAAS,CAAC,gBAAgB,CAAC,CAAC;AACrC,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW;IAC/B,OAAO,SAAS,CAAC,iBAAiB,CAAC,CAAC;AACtC,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY;IAChC,mFAAmF;IACnF,2FAA2F;IAC3F,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAkB,gBAAgB,CAAC,CAAC;IACtE,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC;AACvB,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,eAAe;IACnC,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAS,oBAAoB,CAAC,CAAC;IACrE,OAAO,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AACnD,CAAC;AAED,SAAS,SAAS,CAAC,GAAW;IAC5B,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7B,IAAI,GAAG,KAAK,SAAS,EAAE;QACrB,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,YAAY,CAAC,CAAC;KAC1D;IACD,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["/*\n * Copyright 2023 Google LLC\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Implementation in this file copied from\n * https://github.com/GoogleCloudPlatform/opentelemetry-operations-go/blob/v1.8.0/detectors/gcp/faas.go\n */\n\nimport * as metadata from 'gcp-metadata';\n\nconst ID_METADATA_ATTR = 'id';\nconst CLOUD_RUN_CONFIG_ENV = 'K_CONFIGURATION';\nconst CLOUD_FUNCTION_TARGET_ENV = 'FUNCTION_TARGET';\nconst FAAS_SERVICE_ENV = 'K_SERVICE';\nconst FAAS_REVISION_ENV = 'K_REVISION';\nconst REGION_METADATA_ATTR = 'region';\n\nexport async function onCloudRun(): Promise<boolean> {\n  return process.env[CLOUD_RUN_CONFIG_ENV] !== undefined;\n}\n\nexport async function onCloudFunctions(): Promise<boolean> {\n  return process.env[CLOUD_FUNCTION_TARGET_ENV] !== undefined;\n}\n\n/**\n * The name of the Cloud Run or Cloud Function. Check that {@link onCloudRun()} or {@link\n * onCloudFunctions()} is true before calling this, or it may throw exceptions.\n */\nexport async function faasName(): Promise<string> {\n  return lookupEnv(FAAS_SERVICE_ENV);\n}\n\n/**\n * The version/revision of the Cloud Run or Cloud Function. Check that {@link onCloudRun()} or\n * {@link onCloudFunctions()} is true before calling this, or it may throw exceptions.\n */\nexport async function faasVersion(): Promise<string> {\n  return lookupEnv(FAAS_REVISION_ENV);\n}\n\n/**\n * The ID for the running instance of a Cloud Run or Cloud Function. Check that {@link\n * onCloudRun()} or {@link onCloudFunctions()} is true before calling this, or it may throw\n * exceptions.\n */\nexport async function faasInstance(): Promise<string> {\n  // May be a bignumber.js BigNumber which can just be converted with toString(). See\n  // https://github.com/googleapis/gcp-metadata#take-care-with-large-number-valued-properties\n  const id = await metadata.instance<number | object>(ID_METADATA_ATTR);\n  return id.toString();\n}\n\n/**\n * The cloud region where the running instance of a Cloud Run or Cloud Function is located.\n * Check that {@link onCloudRun()} or {@link onCloudFunctions()} is true before calling this,\n * or it may throw exceptions.\n */\nexport async function faasCloudRegion(): Promise<string> {\n  const region = await metadata.instance<string>(REGION_METADATA_ATTR);\n  return region.slice(region.lastIndexOf('/') + 1);\n}\n\nfunction lookupEnv(key: string): string {\n  const val = process.env[key];\n  if (val === undefined) {\n    throw new Error(`Environment variable ${key} not found`);\n  }\n  return val;\n}\n"]}